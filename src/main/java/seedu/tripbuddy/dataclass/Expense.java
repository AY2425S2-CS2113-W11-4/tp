package seedu.tripbuddy.dataclass;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import org.json.JSONException;
import org.json.JSONObject;
import seedu.tripbuddy.framework.ExpenseManager;

/**
 * Stores info of a travel expense.
 */
public class Expense {
    static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private String name;
    private double amount;
    private String category;
    private LocalDateTime dateTime;

    public Expense(String name, double amount) {
        this.name = name;
        this.amount = amount;
        this.category = null;
        this.dateTime = LocalDateTime.now();
    }

    public Expense(String name, double amount, String category) {
        this.name = name;
        this.amount = amount;
        this.category = category;
        this.dateTime = LocalDateTime.now();
    }

    public Expense(String name, double amount, String category, String dateTimeStr) throws DateTimeParseException {
        this.name = name;
        this.amount = amount;
        this.category = category;
        this.dateTime = LocalDateTime.parse(dateTimeStr, FORMATTER);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getCategory() {
        return category;
    }

    public String getDateTimeString() {
        return dateTime.format(FORMATTER);
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public LocalDateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public String getFormattedAmount(double amount, Currency currency) {
        return currency.getFormattedAmount(amount);
    }

    @Override
    public String toString() {
        String dateTimeStr = dateTime.format(FORMATTER);
        Currency baseCurrency = ExpenseManager.getInstance().getBaseCurrency();
        if (category == null) {
            return "name: " + name + ", amount: " +
                    getFormattedAmount(amount, baseCurrency) +
                    ", date: " + dateTimeStr;
        }
        return "name: " + name + ", amount: " + getFormattedAmount(amount, baseCurrency)
                + ", category: " + category + ", date: " + dateTimeStr;
    }

    public JSONObject toJSON() {
        JSONObject ret = new JSONObject();
        ret.put("name", name);
        ret.put("amount", (int)(amount * 100 + .5) / 100.);
        ret.put("category", category);
        ret.put("dateTime", getDateTimeString());
        return ret;
    }

    /**
     * Constructs a new {@link Expense} from a {@link JSONObject} generated by
     * the {@link seedu.tripbuddy.storage.FileHandler}
     */
    public static Expense fromJSON(JSONObject json) throws JSONException {
        String name = json.getString("name");
        double amount = json.getDouble("amount");
        String category = json.optString("category", null); // returns null if not present
        String dateTimeStr = json.getString("dateTime");

        // Disallow empty names, remove invalid category if exists
        if (category != null && category.isEmpty()) {
            category = null;
        }
        try {
            return new Expense(name, amount, category, dateTimeStr);
        } catch (DateTimeParseException e) {
            throw new JSONException(e.getParsedString() +
                    ": Invalid date/time format! Please use yyyy-MM-dd HH:mm:ss");
        }
    }
}
