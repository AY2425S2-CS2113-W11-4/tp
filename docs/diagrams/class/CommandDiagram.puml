@startuml
top to bottom direction
hide circle
skinparam classAttributeIconSize 0
skinparam classIconSize 0

package "user input" {
    class Command {
        - optMap: <String, String>

        +addOption(option: Option): void
        +hasOpt(opt: String): boolean
        +parseDouble(opt: String): Option
    }

    class InputHandler {
        + isQuitCommand(userInput: String): boolean
        + handleUserInput(userInput: String): String
    }

    class CommandHandler {
        + handleTutorial(): String
        + handleViewBudget(): String
        + handleSetBudget(budget: double): String
        + handleCreateCategory(category: String): String
        + handleSetCategory(expenseName: String, category: String): String
        + handleDeleteExpense(expenseName: String): String
        + handleAddExpense(expenseName: String, amount: double, category: String): String
        + handleAddExpense(expenseName: String, amount: double): String
        + handleListExpense(category: String): String
        + handleMaxExpense(): String
        + handleMinExpense(): String
        + handleFilterExpenseByDateRange(startStr: String, endStr: String): String
        + handleViewCurrency(): String
        + handleSearch(searchWord: String): String
        + handleViewCategories(): String
        + handleClearAll(): String
        + handleSetBaseCurrency(baseCurrency: String): String
        + handleSetTime(expenseName: String, timestampStr: String): String
    }

    enum "<<enumeration>> \n Keyword" as Keyword {
        TUTORIAL
        SET_BUDGET
        ADJUST_BUDGET
        VIEW_BUDGET
        CREATE_CATEGORY
        SET_CATEGORY
        ADD_EXPENSE
        DELETE_EXPENSE
        LIST_EXPENSE
        VIEW_HISTORY
        MAX_EXPENSE
        MIN_EXPENSE
        FILTER_DATE
        VIEW_CURRENCY
        SEARCH
        VIEW_CATEGORIES
        CLEAR
    }

    class Option {
    -opt: String
    -val: String
    }

    class Parser {
        + isOpt(s: String): boolean
        + parseCommand(cmdInput: String): Command
    }
}

Command -> "keyword" Keyword
Command -> "optList" Option: *
InputHandler -> "parser" Parser
InputHandler -> "commandHandler" CommandHandler

Parser -[hidden]-> Command
Keyword -[hidden]-> Option
Parser -[hidden]-> CommandHandler
CommandHandler ..> "<<singleton>> \n ExpenseManager" : manipulates

@enduml
